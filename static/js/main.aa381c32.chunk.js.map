{"version":3,"sources":["constants/CellStates.js","constants/Directions.js","utility/helpFunctions.js","reducers/SnakeBoardReducer/SnakeBoard.js","reducers/GameControls/GameState.js","reducers/index.js","constants/Actions.js","redux_store.js","selectors/CellStateSelector.js","containers/Game_Board/components/Cell.jsx","actions/Init.js","selectors/BoardGameState.js","containers/Game_Board/components/Board.jsx","actions/SnakeActions.js","containers/Game_Board/index.jsx","containers/Game_Info/components/ScoreBoard.jsx","containers/Game_Info/components/GameOver.jsx","shared/littleComponents/SharedButton.jsx","containers/Game_Info/components/Start_Restart.jsx","actions/GameActions.js","containers/Game_Info/index.jsx","App.js","serviceWorker.js","index.js"],"names":["state","HAVE_FOOD","HAVE_SNAKE","HAVE_NOTHING","Directions","LEFT","row","column","value","reverse","RIGHT","UP","DOWN","getMod","number","modFrom","initialState","fromJS","snake","cellMatrix","foodPos","direction","score","snakeOverlapped","gameStarted","combineReducers","boardInfo","foodLoc","arguments","length","undefined","action","type","_action$payload","payload","setIn","CellStates","snakeData","i","foodLocation","get","forEach","snakePos","Math","floor","random","snakeHeadRow","getIn","snakeHeadColumn","snakeTailRow","last","snakeTailColumn","moveHeadPosition","newHead","findIndex","snakeCell","checkIfSnakeOverlapped","updateIn","pop","unshift","push","toJS","set","gameState","Map","middleware","thunk","redux_store","createStore","rootReducers","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","cellStateSelector","createSelector","props","substate","Cell","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","snakeFound","snakeHead","foodCell","prevProps","prevState","_this2","setState","_this$props","initializeCell","cellState","react_default","a","createElement","className","PureComponent","connect","cellInfo","dispatch","GameScoreSelector","SnakeOverlappedSelector","GameStartedSelector","Board","rows","size","columns","intervalId","moveSnake","bind","assertThisInitialized","growSnake","generateFood","startTheGame","keyPressed","_this$state","totalCells","cellUnits","toConsumableArray","Array","map","v","idx","components_Cell","key","increaseSnake","clearInterval","setFood","ReactDOM","findDOMNode","refs","theDiv","focus","setSnake","setInterval","e","stopPropagation","keyCode","changeSnakeDirection","started","onKeyDown","tabIndex","ref","snakeInfo","foodInfo","index","_ref","board_size","components_Board","ScoreBoard","GameOver","over","Component","SharedButton","name","classes","onClick","StartRestart","stopTheGame","startGame","stopGame","littleComponents_SharedButton","components_GameOver","Start_Restart","components_ScoreBoard","App","es","store","Game_Board","Game_Info","Boolean","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa381c32.chunk.js","sourcesContent":["const state = {\n    HAVE_FOOD:\"f\",\n    HAVE_SNAKE:\"s\",\n    HAVE_NOTHING:\"\"\n}\nexport default state","// adding these to head to move the snake\nconst Directions = {\n  LEFT: { row: 0, column: -1 ,value:\"LEFT\" , reverse:\"RIGHT\"},\n  RIGHT: { row: 0, column: 1 ,value:\"RIGHT\" , reverse:\"LEFT\"},\n  UP: { row: -1, column: 0 ,value:\"UP\", reverse: \"DOWN\"},\n  DOWN: { row: 1, column: 0 ,value:\"DOWN\" , reverse:\"UP\"}\n};\n\nexport default Directions","export const getMod = (number,modFrom) => {\n    return ((number %modFrom)+modFrom)%modFrom\n}\n\nexport const checkIfSnakeOverlapped = (snake, newHead) => {\n   let found = snake.findIndex((snakeCell) => snakeCell.get(\"row\") === newHead.row && snakeCell.get(\"column\") === newHead.column)\n   return found>-1? true:false\n}\n\nexport const getNewFoodLocation = (snake, foodLoc) => {\n\n    snake.forEach((snakePos)=>{\n        if(snakePos.get(\"row\") === foodLoc.row && snakePos.get(\"column\") === foodLoc.column)\n        {\n            foodLoc.row= Math.floor(Math.random() * Math.floor(20));\n            foodLoc.column= Math.floor(Math.random() * Math.floor(20));\n        }\n    })\n    return foodLoc\n}","import { fromJS } from \"immutable\";\nimport {\n  INITIALIZE_CELL_STATE,\n  INITIALIZE_SNAKE,\n  SET_FOOD_LOCATION,\n  MOVE_SNAKE,\n  INCREASE_SNAKE_LENGTH,\n  CHANGE_SNAKE_DIRECTION\n} from \"../../constants/Actions\";\nimport CellStates from \"../../constants/CellStates\";\nimport Directions from \"../../constants/Directions\";\nimport {\n  getMod,\n  checkIfSnakeOverlapped,\n  getNewFoodLocation\n} from \"../../utility/helpFunctions\";\nconst initialState = fromJS({\n  snake: [],\n  cellMatrix: [],\n  foodPos: { row: null, column: null },\n  direction: Directions.RIGHT.value,\n  score: 0,\n  snakeOverlapped: false\n});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INITIALIZE_CELL_STATE:\n      const { row, column } = action.payload;\n      return state.setIn([\"cellMatrix\", row, column], CellStates.HAVE_NOTHING);\n\n    case INITIALIZE_SNAKE:\n      const snakeData = fromJS(action.payload);\n      for (let i = 0; i < action.payload.length; i++) {\n        // console.log(\"Initializing at \",action.payload[i])\n        state = state.setIn(\n          [\"cellMatrix\", action.payload[i].row, action.payload[i].column],\n          CellStates.HAVE_SNAKE\n        );\n      }\n      return state.setIn([\"snake\"], snakeData);\n\n    case SET_FOOD_LOCATION:\n      let foodLocation = getNewFoodLocation(state.get(\"snake\"),action.payload)\n      \n      return state\n        .setIn([\"foodPos\", \"row\"], foodLocation.row)\n        .setIn([\"foodPos\", \"column\"], foodLocation.column)\n        .setIn([\"cellMatrix\", foodLocation.row, foodLocation.column], CellStates.HAVE_FOOD);\n\n    case MOVE_SNAKE:\n      //DO NOT MOVE SNAKE IF SNAKE OVERLAPPED\n      if (state.get(\"snakeOverlapped\")) return state;\n\n      const snakeHeadRow = state.getIn([\"snake\", 0, \"row\"]);\n      const snakeHeadColumn = state.getIn([\"snake\", 0, \"column\"]);\n      const snakeTailRow = state\n        .get(\"snake\")\n        .last()\n        .get(\"row\");\n      const snakeTailColumn = state\n        .get(\"snake\")\n        .last()\n        .get(\"column\");\n      const moveHeadPosition = Directions[state.getIn([\"direction\"])];\n      const newHead = {\n        row: getMod(snakeHeadRow + moveHeadPosition.row, 20),\n        column: getMod(snakeHeadColumn + moveHeadPosition.column, 20)\n      };\n      // console.log(\"The snake tail info\",snakeTailRow,snakeTailColumn,\"The snake tail had\",state.getIn([\"cellMatrix\",snakeTailRow,snakeTailColumn]))\n      //checking if overlap is there because of snake\n      if (checkIfSnakeOverlapped(state.get(\"snake\"), newHead))\n        return state.setIn([\"snakeOverlapped\"], true);\n\n      if (\n        state.getIn([\"foodPos\", \"row\"]) === newHead.row &&\n        state.getIn([\"foodPos\", \"column\"]) === newHead.column\n      )\n        state = state.updateIn([\"score\"], score => score + 10);\n\n      return state\n        .setIn(\n          [\"cellMatrix\", newHead.row, newHead.column],\n          CellStates.HAVE_SNAKE\n        )\n        .setIn(\n          [\"cellMatrix\", snakeTailRow, snakeTailColumn],\n          CellStates.HAVE_NOTHING\n        )\n        .updateIn([\"snake\"], snake => snake.pop().unshift(fromJS(newHead)));\n\n    case INCREASE_SNAKE_LENGTH:\n      return state.updateIn([\"snake\"], snake =>\n        snake.push(fromJS(snake.last().toJS()))\n      );\n\n    case CHANGE_SNAKE_DIRECTION:\n      if (Directions[action.payload.value].reverse === state.get(\"direction\"))\n        return state;\n      return state.set(\"direction\", action.payload.value);\n    default:\n      return state;\n  }\n}\n","import { fromJS } from \"immutable\";\nimport { START_THE_GAME, STOP_THE_GAME } from \"../../constants/Actions\";\nconst initialState = fromJS({\n  gameStarted: false\n});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case START_THE_GAME:\n      return state.set(\"gameStarted\", true);\n    case STOP_THE_GAME:\n      return state.set(\"gameStarted\", false);\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux-immutable\";\nimport SnakeBoardReducer from \"./SnakeBoardReducer/SnakeBoard\"\nimport GameStateReducer from \"./GameControls/GameState\"\nexport default combineReducers({\n    boardInfo:SnakeBoardReducer,\n    gameState:GameStateReducer\n});\n","export const INITIALIZE_CELL_STATE = \"INITIALIZE_CELL_STATE\";\nexport const CHANGE_CELL_STATE = \"CHANGE_CELL_STATE\";\nexport const INITIALIZE_SNAKE = \"INITIALIZE_SNAKE\"\nexport const SET_FOOD_LOCATION = \"SET_FOOD_LOCATION\"\nexport const MOVE_SNAKE = \"MOVE_SNAKE\"\nexport const INCREASE_SNAKE_LENGTH = \"INCREASE_SNAKE_LENGTH\"\nexport const CHANGE_SNAKE_DIRECTION = \"CHANGE_SNAKE_DIRECTION\"\nexport const START_THE_GAME = \"START_THE_GAME\"\nexport const STOP_THE_GAME = \"STOP_THE_GAME\"\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducers from \"./reducers\";\nimport { Map } from \"immutable\";\nconst initialState = Map({});\nconst middleware = [thunk];\nconst redux_store = createStore(\n  rootReducers,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nexport default redux_store;\n","import {createSelector} from 'reselect'\n\nconst selectCellState = (state,props) =>  state.getIn(['boardInfo','cellMatrix',props.row,props.column])\n\nexport const cellStateSelector = createSelector(selectCellState,substate => substate)","import React, { PureComponent } from \"react\";\nimport CellStates from \"../../../constants/CellStates\";\n//react reduct connector\nimport { connect } from 'react-redux'\n\n//selectors for the cell\nimport {cellStateSelector} from \"../../../selectors/CellStateSelector\"\n\n//actions for the cell\nimport {initializeCell} from \"../../../actions/Init\"\nclass Cell extends PureComponent {\n  constructor(props) {\n    super();\n    let snakeFound = props.snake.findIndex(snakeHead => {\n        // if(snakeHead.row == props.row && snakeHead.column === props.column)\n        // // console.log(\"HERE==>>\",snakeHead.row , props.row,  snakeHead.column, props.column)\n        return snakeHead.row === props.row && snakeHead.column === props.column;\n      }) > -1;\n\n    this.state = {\n      row: props.row,\n      column: props.column,\n      value: snakeFound ? CellStates.HAVE_SNAKE : props.foodCell?CellStates.HAVE_FOOD:CellStates.HAVE_NOTHING\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n      // console.log(\"The prev props\",prevProps)\n    let snakeFound =\n      this.props.snake.findIndex(snakeHead => {\n        return (\n          snakeHead.row === this.state.row &&\n          snakeHead.column === this.state.column\n        );\n      }) > -1;\n    if (snakeFound) this.setState({ value: CellStates.HAVE_SNAKE });\n    else if (this.props.foodCell)\n      this.setState({ value: CellStates.HAVE_FOOD });\n    else \n      this.setState({ value: CellStates.HAVE_NOTHING });\n  }\n\n  //Initializing the Cell Component\n  componentDidMount(){\n    // console.log(\"COMPONENT MOUNTED\")\n    const {row, column} = this.props ;\n    this.props.initializeCell({row,column})\n  }\n\n  render() {\n    const { cellState } = this.props;\n    return <div className=\"cell\">{cellState}</div>;\n  }\n}\nconst mapStateToProps = (state,props) =>( {\n  cellState:cellStateSelector(state,props)\n})\nexport default connect(mapStateToProps,{initializeCell})(Cell)\n","import {INITIALIZE_CELL_STATE, INITIALIZE_SNAKE, SET_FOOD_LOCATION} from \"../constants/Actions\"\nexport const initializeCell = (cellInfo) => dispatch => {\n    // // console.log(\"INITIALIZE\",cellInfo)\n    dispatch({\n        type:INITIALIZE_CELL_STATE,\n        payload:cellInfo\n    })\n}\n\nexport const setSnake = (snakeInfo) => dispatch => {\n    dispatch({\n        type:INITIALIZE_SNAKE,\n        payload:snakeInfo\n    })\n}\n\nexport const setFood = (foodInfo) => dispatch => {\n    dispatch({\n        type:SET_FOOD_LOCATION,\n        payload:foodInfo\n    })\n}","import { createSelector } from \"reselect\";\n\nconst selectGameScore = state => state.getIn([\"boardInfo\", \"score\"]);\nconst selectSnakeOverlapped = state =>\n  state.getIn([\"boardInfo\", \"snakeOverlapped\"]);\nconst selectGameStartState = state => state.getIn([\"gameState\", \"gameStarted\"]);\n\nexport const GameScoreSelector = createSelector(\n  selectGameScore,\n  substate => substate\n);\n\nexport const SnakeOverlappedSelector = createSelector(\n  selectSnakeOverlapped,\n  substate => substate\n);\n\nexport const GameStartedSelector = createSelector(\n  selectGameStartState,\n  substate => substate\n);\n","import React, { PureComponent } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Cell from \"./Cell\";\n\n//react reduct connector\nimport { connect } from \"react-redux\";\n//Selectors for the board\nimport {\n  GameScoreSelector,\n  SnakeOverlappedSelector,\n  GameStartedSelector\n} from \"../../../selectors/BoardGameState\";\n//actions for the board\nimport { setSnake, setFood } from \"../../../actions/Init\";\nimport {\n  moveSnake,\n  increaseSnake,\n  changeSnakeDirection\n} from \"../../../actions/SnakeActions\";\n\n//constants\nimport Directions from \"../../../constants/Directions\";\nclass Board extends PureComponent {\n  constructor(props) {\n    super();\n    this.state = {\n      rows: props.size.rows,\n      columns: props.size.columns,\n      snake: [{ row: 1, column: 2 }, { row: 1, column: 1 }],\n      intervalId: null,\n      foodPos: { row: 8, column: 2 }\n    };\n    this.moveSnake = this.moveSnake.bind(this);\n    this.growSnake = this.growSnake.bind(this);\n    this.generateFood = this.generateFood.bind(this);\n    this.startTheGame = this.startTheGame.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n    //initializing the board cells start\n    const { rows, columns, snake, foodPos } = this.state;\n    const totalCells = rows * columns;\n    this.cellUnits = [...Array(totalCells)].map((v, idx) => {\n      const row = Math.floor(idx / columns);\n      const column = idx % columns;\n      const foodCell = row === foodPos.row && column === foodPos.column;\n      // // console.log(\"Rendering\", idx,\" Row is\",row, \"Column is\",column);\n      return (\n        <Cell\n          row={row}\n          column={column}\n          key={idx}\n          snake={snake}\n          foodCell={foodCell}\n        />\n      );\n    });\n    //initializing the board cells end\n  }\n\n  moveSnake() {\n    // const { columns } = this.state;\n    // const newHead = {\n    //   row: this.state.snake[0].row,\n    //   column: (this.state.snake[0].column + 1) % columns\n    // };\n\n    // const snakelength = this.state.snake.length;\n    // let newSnake2 = this.state.snake.slice(0, snakelength - 1);\n\n    // newSnake2.unshift(newHead);\n\n    // this.setState({ snake: newSnake2 });\n    this.props.moveSnake();\n  }\n  growSnake() {\n    this.generateFood();\n    this.props.increaseSnake();\n  }\n  componentDidMount() {\n    //starting game in 10 seconds\n    // setTimeout(() => {\n    //   this.startTheGame();\n    // }, 5000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n  generateFood() {\n    let row = Math.floor(Math.random() * Math.floor(this.state.rows));\n    let column = Math.floor(Math.random() * Math.floor(this.state.columns));\n    let foodPos = { row, column };\n    // // console.log(\"FOOD POSITION IS\", foodPos);\n    this.setState({ foodPos });\n    this.props.setFood(foodPos);\n  }\n  startTheGame() {\n    //focus the div\n    ReactDOM.findDOMNode(this.refs.theDiv).focus();\n    //initializing the snake in the redux store starts\n    this.props.setSnake(this.state.snake);\n    this.props.setFood(this.state.foodPos);\n    const intervalId = setInterval(this.moveSnake, 100);\n    this.setState({ intervalId: intervalId });\n    //initializing the snake in the redux store end\n  }\n\n  keyPressed(e) {\n    e.stopPropagation();\n    \n    switch (e.keyCode) {\n      case 37:\n        //left key pressed\n        this.props.changeSnakeDirection(Directions.LEFT);\n        break;\n      case 39:\n        //right key pressed\n        this.props.changeSnakeDirection(Directions.RIGHT);\n        break;\n      case 38:\n        //up key pressed\n        this.props.changeSnakeDirection(Directions.UP);\n        break;\n      case 40:\n        ///down key pressed\n        this.props.changeSnakeDirection(Directions.DOWN);\n        break;\n      default:\n        // DO NOTHING\n        break;\n    }\n  }\n\n  componentDidUpdate(prevProps,prevState) {\n    if(this.props.score > prevProps.score)\n    this.growSnake()\n    if(this.props.started && !prevProps.started)\n    this.startTheGame()\n  }\n  render() {\n    return (\n      <div className=\"main-game-board\" onKeyDown={this.keyPressed} tabIndex=\"0\" ref=\"theDiv\">\n        {this.cellUnits}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  score: GameScoreSelector(state),\n  snakeOverlapped: SnakeOverlappedSelector(state),\n  started:GameStartedSelector(state)\n});\nexport default connect(\n  mapStateToProps,\n  { setSnake, setFood, moveSnake, increaseSnake, changeSnakeDirection }\n)(Board);\n","import { MOVE_SNAKE, INCREASE_SNAKE_LENGTH, CHANGE_SNAKE_DIRECTION } from \"../constants/Actions\";\nexport const moveSnake = () => dispatch => {\n  dispatch({\n    type: MOVE_SNAKE\n  });\n};\n\nexport const increaseSnake = () => dispatch => {\n  dispatch({\n    type: INCREASE_SNAKE_LENGTH\n  });\n};\n\n\nexport const changeSnakeDirection = (direction) => dispatch => {\n  dispatch({\n    type:CHANGE_SNAKE_DIRECTION,\n    payload:direction\n  })\n}","import React from \"react\";\nimport Board from \"./components/Board\";\nconst index = ({ board_size }) => {\n  return <Board size={board_size} />;\n};\nexport default index;\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\n//selectors for Score Board\nimport { GameScoreSelector } from \"../../../selectors/BoardGameState\";\nclass ScoreBoard extends PureComponent {\n  render() {\n    const { score } = this.props;\n    return (\n      <div className=\"scoreboard\">\n        <h3>SCORE: {score} </h3>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  score: GameScoreSelector(state)\n});\nexport default connect(\n  mapStateToProps,\n  {}\n)(ScoreBoard);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SnakeOverlappedSelector } from \"../../../selectors/BoardGameState\";\nclass GameOver extends Component {\n  render() {\n    const { over } = this.props;\n    return (\n      <div>\n        {!over && <h3> GAME RUNNING</h3>}\n        {over && <h3>###### GAME OVER #####</h3>}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  over: SnakeOverlappedSelector(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(GameOver);\n","import React from 'react'\n\n const SharedButton = ({\n     name,\n     action,\n     classes\n }) => {\n    return (\n        <div>\n            <button onClick={action} className={\"btn \"+classes}>{name}</button>\n        </div>\n    )\n}\n\nexport default SharedButton","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n//actions for the game\nimport { startGame, stopGame } from \"../../../actions/GameActions\";\nimport SharedButton from \"../../../shared/littleComponents/SharedButton\";\nclass StartRestart extends Component {\n  constructor() {\n    super();\n    this.startTheGame = this.startTheGame.bind(this);\n    this.stopTheGame = this.stopTheGame.bind(this);\n  }\n  startTheGame() {\n    this.props.startGame();\n  }\n  stopTheGame() {\n    this.props.stopGame();\n  }\n  render() {\n    return (\n      <div>\n        <SharedButton name=\"Start\" action={this.startTheGame} />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { startGame, stopGame }\n)(StartRestart);\n","import { START_THE_GAME, STOP_THE_GAME } from \"../constants/Actions\";\nexport const startGame = () => dispatch => {\n  dispatch({\n    type: START_THE_GAME\n  });\n};\nexport const stopGame = () => dispatch => {\n  dispatch({\n    type: STOP_THE_GAME\n  });\n};\n","import React from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport GameOver from \"./components/GameOver\";\nimport StartRestart from \"./components/Start_Restart\";\nconst index = () => {\n  return (\n    <div>\n      <GameOver />\n      <StartRestart />\n      <ScoreBoard />\n    </div>\n  );\n};\n\nexport default index;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n//Adding Redux Store\nimport { Provider } from \"react-redux\";\nimport redux_store from \"./redux_store\";\n//External Components\nimport Board from \"./containers/Game_Board\";\nimport GameInfo from \"./containers/Game_Info\";\nconst size = {\n  rows: 20,\n  columns: 20\n};\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={redux_store}>\n        <div className=\"App\">\n          <Board board_size={size} />\n          <GameInfo />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}