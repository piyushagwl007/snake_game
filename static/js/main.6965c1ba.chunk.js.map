{"version":3,"sources":["constants/CellStates.js","constants/Directions.js","utility/helpFunctions.js","reducers/SnakeBoardReducer/SnakeBoard.js","reducers/index.js","constants/Actions.js","redux_store.js","selectors/CellStateSelector.js","containers/Game_Board/components/Cell.jsx","actions/Init.js","selectors/BoardGameState.js","containers/Game_Board/components/Board.jsx","actions/SnakeActions.js","containers/Game_Board/index.jsx","containers/Game_Info/components/ScoreBoard.jsx","containers/Game_Info/components/GameOver.jsx","containers/Game_Info/index.jsx","App.js","serviceWorker.js","index.js"],"names":["state","HAVE_FOOD","HAVE_SNAKE","HAVE_NOTHING","Directions","LEFT","row","column","value","reverse","RIGHT","UP","DOWN","getMod","number","modFrom","initialState","fromJS","snake","cellMatrix","foodPos","direction","score","snakeOverlapped","combineReducers","boardInfo","arguments","length","undefined","action","type","_action$payload","payload","setIn","CellStates","snakeData","i","foodRow","foodColumn","get","snakeHeadRow","getIn","snakeHeadColumn","snakeTailRow","last","snakeTailColumn","moveHeadPosition","newHead","findIndex","snakeCell","checkIfSnakeOverlapped","updateIn","pop","unshift","push","toJS","set","Map","middleware","thunk","redux_store","createStore","rootReducers","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","cellStateSelector","createSelector","props","substate","Cell","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","snakeFound","snakeHead","foodCell","prevProps","prevState","_this2","setState","_this$props","initializeCell","cellState","react_default","a","createElement","className","PureComponent","connect","cellInfo","dispatch","GameScoreSelector","SnakeOverlappedSelector","Board","rows","size","columns","intervalId","moveSnake","bind","assertThisInitialized","growSnake","generateFood","startTheGame","keyPressed","_this$state","totalCells","cellUnits","toConsumableArray","Array","map","v","idx","Math","floor","components_Cell","key","increaseSnake","setTimeout","clearInterval","random","setFood","setSnake","setInterval","e","stopPropagation","keyCode","changeSnakeDirection","onKeyDown","tabIndex","snakeInfo","foodInfo","index","_ref","board_size","components_Board","ScoreBoard","GameOver","over","Component","components_GameOver","components_ScoreBoard","App","es","store","Game_Board","Game_Info","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6965c1ba.chunk.js","sourcesContent":["const state = {\n    HAVE_FOOD:\"f\",\n    HAVE_SNAKE:\"s\",\n    HAVE_NOTHING:\"\"\n}\nexport default state","// adding these to head to move the snake\nconst Directions = {\n  LEFT: { row: 0, column: -1 ,value:\"LEFT\" , reverse:\"RIGHT\"},\n  RIGHT: { row: 0, column: 1 ,value:\"RIGHT\" , reverse:\"LEFT\"},\n  UP: { row: -1, column: 0 ,value:\"UP\", reverse: \"DOWN\"},\n  DOWN: { row: 1, column: 0 ,value:\"DOWN\" , reverse:\"UP\"}\n};\n\nexport default Directions","export const getMod = (number,modFrom) => {\n    return ((number %modFrom)+modFrom)%modFrom\n}\n\nexport const checkIfSnakeOverlapped = (snake, newHead) => {\n   let found = snake.findIndex((snakeCell) => snakeCell.get(\"row\") === newHead.row && snakeCell.get(\"column\") === newHead.column)\n   return found>-1? true:false\n}","import { fromJS } from \"immutable\";\nimport {\n  INITIALIZE_CELL_STATE,\n  INITIALIZE_SNAKE,\n  SET_FOOD_LOCATION,\n  MOVE_SNAKE,\n  INCREASE_SNAKE_LENGTH,\n  CHANGE_SNAKE_DIRECTION\n} from \"../../constants/Actions\";\nimport CellStates from \"../../constants/CellStates\";\nimport Directions from \"../../constants/Directions\";\nimport { getMod ,checkIfSnakeOverlapped } from \"../../utility/helpFunctions\";\nconst initialState = fromJS({\n  snake: [],\n  cellMatrix: [],\n  foodPos: { row: null, column: null },\n  direction: Directions.RIGHT.value,\n  score: 0,\n  snakeOverlapped: false\n});\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INITIALIZE_CELL_STATE:\n      const { row, column } = action.payload;\n      return state.setIn([\"cellMatrix\", row, column], CellStates.HAVE_NOTHING);\n\n    case INITIALIZE_SNAKE:\n      const snakeData = fromJS(action.payload);\n      for (let i = 0; i < action.payload.length; i++) {\n        // console.log(\"Initializing at \",action.payload[i])\n        state = state.setIn(\n          [\"cellMatrix\", action.payload[i].row, action.payload[i].column],\n          CellStates.HAVE_SNAKE\n        );\n      }\n      return state.setIn([\"snake\"], snakeData);\n\n    case SET_FOOD_LOCATION:\n      const foodRow = action.payload.row;\n      const foodColumn = action.payload.column;\n      return state\n        .setIn([\"foodPos\", \"row\"], foodRow)\n        .setIn([\"foodPos\", \"column\"], foodColumn)\n        .setIn([\"cellMatrix\", foodRow, foodColumn], CellStates.HAVE_FOOD);\n\n    case MOVE_SNAKE:\n      //DO NOT MOVE SNAKE IF SNAKE OVERLAPPED\n      if (state.get(\"snakeOverlapped\")) return state;\n\n      const snakeHeadRow = state.getIn([\"snake\", 0, \"row\"]);\n      const snakeHeadColumn = state.getIn([\"snake\", 0, \"column\"]);\n      const snakeTailRow = state\n        .get(\"snake\")\n        .last()\n        .get(\"row\");\n      const snakeTailColumn = state\n        .get(\"snake\")\n        .last()\n        .get(\"column\");\n      const moveHeadPosition = Directions[state.getIn([\"direction\"])];\n      const newHead = {\n        row: getMod(snakeHeadRow + moveHeadPosition.row, 20),\n        column: getMod(snakeHeadColumn + moveHeadPosition.column, 20)\n      };\n      // console.log(\"The snake tail info\",snakeTailRow,snakeTailColumn,\"The snake tail had\",state.getIn([\"cellMatrix\",snakeTailRow,snakeTailColumn]))\n      //checking if overlap is there because of snake\n      if (\n        checkIfSnakeOverlapped(state.get(\"snake\"),newHead)\n      )\n        return state.setIn([\"snakeOverlapped\"], true);\n\n      if (\n        state.getIn([\"foodPos\", \"row\"]) === newHead.row &&\n        state.getIn([\"foodPos\", \"column\"]) === newHead.column\n      )\n        state = state.updateIn([\"score\"], score => score + 10);\n\n      return state\n        .setIn(\n          [\"cellMatrix\", newHead.row, newHead.column],\n          CellStates.HAVE_SNAKE\n        )\n        .setIn(\n          [\"cellMatrix\", snakeTailRow, snakeTailColumn],\n          CellStates.HAVE_NOTHING\n        )\n        .updateIn([\"snake\"], snake => snake.pop().unshift(fromJS(newHead)));\n\n    case INCREASE_SNAKE_LENGTH:\n      return state.updateIn([\"snake\"], snake =>\n        snake.push(fromJS(snake.last().toJS()))\n      );\n\n    case CHANGE_SNAKE_DIRECTION:\n      if(Directions[action.payload.value].reverse === state.get(\"direction\"))\n      return state\n      return state.set(\"direction\", action.payload.value);\n    default:\n      return state;\n  }\n}\n\n\n","import { combineReducers } from \"redux-immutable\";\nimport SnakeBoardReducer from \"./SnakeBoardReducer/SnakeBoard\"\nexport default combineReducers({\n    boardInfo:SnakeBoardReducer\n});\n","export const INITIALIZE_CELL_STATE = \"INITIALIZE_CELL_STATE\";\nexport const CHANGE_CELL_STATE = \"CHANGE_CELL_STATE\";\nexport const INITIALIZE_SNAKE = \"INITIALIZE_SNAKE\"\nexport const SET_FOOD_LOCATION = \"SET_FOOD_LOCATION\"\nexport const MOVE_SNAKE = \"MOVE_SNAKE\"\nexport const INCREASE_SNAKE_LENGTH = \"INCREASE_SNAKE_LENGTH\"\nexport const CHANGE_SNAKE_DIRECTION = \"CHANGE_SNAKE_DIRECTION\"\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducers from \"./reducers\";\nimport { Map } from \"immutable\";\nconst initialState = Map({});\nconst middleware = [thunk];\nconst redux_store = createStore(\n  rootReducers,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nexport default redux_store;\n","import {createSelector} from 'reselect'\n\nconst selectCellState = (state,props) =>  state.getIn(['boardInfo','cellMatrix',props.row,props.column])\n\nexport const cellStateSelector = createSelector(selectCellState,substate => substate)","import React, { PureComponent } from \"react\";\nimport CellStates from \"../../../constants/CellStates\";\n//react reduct connector\nimport { connect } from 'react-redux'\n\n//selectors for the cell\nimport {cellStateSelector} from \"../../../selectors/CellStateSelector\"\n\n//actions for the cell\nimport {initializeCell} from \"../../../actions/Init\"\nclass Cell extends PureComponent {\n  constructor(props) {\n    super();\n    let snakeFound = props.snake.findIndex(snakeHead => {\n        // if(snakeHead.row == props.row && snakeHead.column === props.column)\n        // // console.log(\"HERE==>>\",snakeHead.row , props.row,  snakeHead.column, props.column)\n        return snakeHead.row === props.row && snakeHead.column === props.column;\n      }) > -1;\n\n    this.state = {\n      row: props.row,\n      column: props.column,\n      value: snakeFound ? CellStates.HAVE_SNAKE : props.foodCell?CellStates.HAVE_FOOD:CellStates.HAVE_NOTHING\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n      // console.log(\"The prev props\",prevProps)\n    let snakeFound =\n      this.props.snake.findIndex(snakeHead => {\n        return (\n          snakeHead.row === this.state.row &&\n          snakeHead.column === this.state.column\n        );\n      }) > -1;\n    if (snakeFound) this.setState({ value: CellStates.HAVE_SNAKE });\n    else if (this.props.foodCell)\n      this.setState({ value: CellStates.HAVE_FOOD });\n    else \n      this.setState({ value: CellStates.HAVE_NOTHING });\n  }\n\n  //Initializing the Cell Component\n  componentDidMount(){\n    // console.log(\"COMPONENT MOUNTED\")\n    const {row, column} = this.props ;\n    this.props.initializeCell({row,column})\n  }\n\n  render() {\n    const { cellState } = this.props;\n    return <div className=\"cell\">{cellState}</div>;\n  }\n}\nconst mapStateToProps = (state,props) =>( {\n  cellState:cellStateSelector(state,props)\n})\nexport default connect(mapStateToProps,{initializeCell})(Cell)\n","import {INITIALIZE_CELL_STATE, INITIALIZE_SNAKE, SET_FOOD_LOCATION} from \"../constants/Actions\"\nexport const initializeCell = (cellInfo) => dispatch => {\n    // // console.log(\"INITIALIZE\",cellInfo)\n    dispatch({\n        type:INITIALIZE_CELL_STATE,\n        payload:cellInfo\n    })\n}\n\nexport const setSnake = (snakeInfo) => dispatch => {\n    dispatch({\n        type:INITIALIZE_SNAKE,\n        payload:snakeInfo\n    })\n}\n\nexport const setFood = (foodInfo) => dispatch => {\n    dispatch({\n        type:SET_FOOD_LOCATION,\n        payload:foodInfo\n    })\n}","import { createSelector } from \"reselect\";\n\nconst selectGameScore = state => state.getIn([\"boardInfo\", \"score\"]);\nconst selectSnakeOverlapped = state =>\n  state.getIn([\"boardInfo\", \"snakeOverlapped\"]);\n\nexport const GameScoreSelector = createSelector(\n  selectGameScore,\n  substate => substate\n);\n\nexport const SnakeOverlappedSelector = createSelector(\n  selectSnakeOverlapped,\n  substate => substate\n);\n","import React, { PureComponent } from \"react\";\nimport Cell from \"./Cell\";\n\n//react reduct connector\nimport { connect } from \"react-redux\";\n//Selectors for the board\nimport {\n  GameScoreSelector,\n  SnakeOverlappedSelector\n} from \"../../../selectors/BoardGameState\";\n//actions for the board\nimport { setSnake, setFood } from \"../../../actions/Init\";\nimport {\n  moveSnake,\n  increaseSnake,\n  changeSnakeDirection\n} from \"../../../actions/SnakeActions\";\n\n//constants\nimport Directions from \"../../../constants/Directions\";\nclass Board extends PureComponent {\n  constructor(props) {\n    super();\n    this.state = {\n      rows: props.size.rows,\n      columns: props.size.columns,\n      snake: [{ row: 1, column: 2 }, { row: 1, column: 1 }],\n      intervalId: null,\n      foodPos: { row: 8, column: 2 }\n    };\n    this.moveSnake = this.moveSnake.bind(this);\n    this.growSnake = this.growSnake.bind(this);\n    this.generateFood = this.generateFood.bind(this);\n    this.startTheGame = this.startTheGame.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n    //initializing the board cells start\n    const { rows, columns, snake, foodPos } = this.state;\n    const totalCells = rows * columns;\n    this.cellUnits = [...Array(totalCells)].map((v, idx) => {\n      const row = Math.floor(idx / columns);\n      const column = idx % columns;\n      const foodCell = row === foodPos.row && column === foodPos.column;\n      // // console.log(\"Rendering\", idx,\" Row is\",row, \"Column is\",column);\n      return (\n        <Cell\n          row={row}\n          column={column}\n          key={idx}\n          snake={snake}\n          foodCell={foodCell}\n        />\n      );\n    });\n    //initializing the board cells end\n  }\n\n  moveSnake() {\n    // const { columns } = this.state;\n    // const newHead = {\n    //   row: this.state.snake[0].row,\n    //   column: (this.state.snake[0].column + 1) % columns\n    // };\n\n    // const snakelength = this.state.snake.length;\n    // let newSnake2 = this.state.snake.slice(0, snakelength - 1);\n\n    // newSnake2.unshift(newHead);\n\n    // this.setState({ snake: newSnake2 });\n    this.props.moveSnake();\n  }\n  growSnake() {\n    this.generateFood();\n    this.props.increaseSnake();\n  }\n  componentDidMount() {\n    //starting game in 10 seconds\n    setTimeout(() => {\n      this.startTheGame();\n    }, 5000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n  generateFood() {\n    let row = Math.floor(Math.random() * Math.floor(this.state.rows));\n    let column = Math.floor(Math.random() * Math.floor(this.state.columns));\n    let foodPos = { row, column };\n    // // console.log(\"FOOD POSITION IS\", foodPos);\n    this.setState({ foodPos });\n    this.props.setFood(foodPos);\n  }\n  startTheGame() {\n    //initializing the snake in the redux store starts\n    this.props.setSnake(this.state.snake);\n    this.props.setFood(this.state.foodPos);\n    const intervalId = setInterval(this.moveSnake, 100);\n    this.setState({ intervalId: intervalId });\n    //initializing the snake in the redux store end\n  }\n\n  keyPressed(e) {\n    e.stopPropagation();\n    \n    switch (e.keyCode) {\n      case 37:\n        //left key pressed\n        this.props.changeSnakeDirection(Directions.LEFT);\n        break;\n      case 39:\n        //right key pressed\n        this.props.changeSnakeDirection(Directions.RIGHT);\n        break;\n      case 38:\n        //up key pressed\n        this.props.changeSnakeDirection(Directions.UP);\n        break;\n      case 40:\n        ///down key pressed\n        this.props.changeSnakeDirection(Directions.DOWN);\n        break;\n      default:\n        // DO NOTHING\n        break;\n    }\n  }\n\n  componentDidUpdate(prevProps,prevState) {\n    if(this.props.score > prevProps.score)\n    this.growSnake()\n  }\n  render() {\n    return (\n      <div className=\"main-game-board\" onKeyDown={this.keyPressed} tabIndex=\"0\">\n        {this.cellUnits}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  score: GameScoreSelector(state),\n  snakeOverlapped: SnakeOverlappedSelector(state)\n});\nexport default connect(\n  mapStateToProps,\n  { setSnake, setFood, moveSnake, increaseSnake, changeSnakeDirection }\n)(Board);\n","import { MOVE_SNAKE, INCREASE_SNAKE_LENGTH, CHANGE_SNAKE_DIRECTION } from \"../constants/Actions\";\nexport const moveSnake = () => dispatch => {\n  dispatch({\n    type: MOVE_SNAKE\n  });\n};\n\nexport const increaseSnake = () => dispatch => {\n  dispatch({\n    type: INCREASE_SNAKE_LENGTH\n  });\n};\n\n\nexport const changeSnakeDirection = (direction) => dispatch => {\n  dispatch({\n    type:CHANGE_SNAKE_DIRECTION,\n    payload:direction\n  })\n}","import React from \"react\";\nimport Board from \"./components/Board\";\nconst index = ({ board_size }) => {\n  return <Board size={board_size} />;\n};\nexport default index;\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\n//selectors for Score Board\nimport { GameScoreSelector } from \"../../../selectors/BoardGameState\";\nclass ScoreBoard extends PureComponent {\n  render() {\n    const { score } = this.props;\n    return (\n      <div className=\"scoreboard\">\n        <h3>SCORE: {score} </h3>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  score: GameScoreSelector(state)\n});\nexport default connect(\n  mapStateToProps,\n  {}\n)(ScoreBoard);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SnakeOverlappedSelector } from \"../../../selectors/BoardGameState\";\nclass GameOver extends Component {\n  render() {\n    const { over } = this.props;\n    return (\n      <div>\n        {!over && <h3> GAME RUNNING</h3>}\n        {over && <h1>###### GAME OVER #####</h1>}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  over: SnakeOverlappedSelector(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(GameOver);\n","import React from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport GameOver from \"./components/GameOver\";\nconst index = () => {\n  return (\n    <div>\n      <GameOver />\n      <ScoreBoard />\n    </div>\n  );\n};\n\nexport default index;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n//Adding Redux Store\nimport { Provider } from \"react-redux\";\nimport redux_store from \"./redux_store\";\n//External Components\nimport Board from \"./containers/Game_Board\";\nimport GameInfo from \"./containers/Game_Info\";\nconst size = {\n  rows: 20,\n  columns: 20\n};\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={redux_store}>\n        <div className=\"App test\">\n          <Board board_size={size} />\n          <GameInfo />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}